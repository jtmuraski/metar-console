// <auto-generated />
using System;
using MetarsConsole.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MetarsConsole.Migrations
{
    [DbContext(typeof(MetarContext))]
    [Migration("20220118053253_fixit")]
    partial class fixit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MetarsConsole.Models.Metar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AltimeterInHg")
                        .HasColumnType("float");

                    b.Property<double>("DewPointC")
                        .HasColumnType("float");

                    b.Property<double>("ElevationM")
                        .HasColumnType("float");

                    b.Property<string>("FlightCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longtitude")
                        .HasColumnType("float");

                    b.Property<decimal>("MaxTC")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MetarType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MinTC")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ObservationTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Pcp6hrIn")
                        .HasColumnType("float");

                    b.Property<double>("PrecipIn")
                        .HasColumnType("float");

                    b.Property<string>("RawText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SeaLevelPressureMb")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TempC")
                        .HasColumnType("float");

                    b.Property<double>("ThreeHrPressureTEndencyMb")
                        .HasColumnType("float");

                    b.Property<double>("VisibilityStatuteMi")
                        .HasColumnType("float");

                    b.Property<int>("WindDirDegree")
                        .HasColumnType("int");

                    b.Property<int>("WindSpeedKnots")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Metars");
                });

            modelBuilder.Entity("MetarsConsole.Models.QualityControlFlags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AutoStation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MetarId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MetarId");

                    b.ToTable("QualityFlags");
                });

            modelBuilder.Entity("MetarsConsole.Models.SkyCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CloudBaseFtAng")
                        .HasColumnType("int");

                    b.Property<int?>("MetarId")
                        .HasColumnType("int");

                    b.Property<string>("SkyCover")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MetarId");

                    b.ToTable("SkyConditions");
                });

            modelBuilder.Entity("MetarsConsole.Models.QualityControlFlags", b =>
                {
                    b.HasOne("MetarsConsole.Models.Metar", null)
                        .WithMany("QualityControlFlag")
                        .HasForeignKey("MetarId");
                });

            modelBuilder.Entity("MetarsConsole.Models.SkyCondition", b =>
                {
                    b.HasOne("MetarsConsole.Models.Metar", null)
                        .WithMany("SkyConditions")
                        .HasForeignKey("MetarId");
                });

            modelBuilder.Entity("MetarsConsole.Models.Metar", b =>
                {
                    b.Navigation("QualityControlFlag");

                    b.Navigation("SkyConditions");
                });
#pragma warning restore 612, 618
        }
    }
}
